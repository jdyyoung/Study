//===========================20190620=======================================================================================================
Linux Shell脚本攻略：shell中各种括号()、(())、[]、[[]]、{}的作用 - CS青雀的巢 - CSDN博客 - https://blog.csdn.net/ztf312/article/details/52317571

Shell 基础 -- 总结几种括号、引号的用法 - tongye - 博客园 - https://www.cnblogs.com/tongye/p/10646211.html
1、双引号 " "
双引号常用于包含一组字符串，在双引号中，除了 "$"、""、" ` (反引号)"有特殊含义外，其余字符（如IFS、换行符、回车符等）没有特殊含义。
$a=3
$echo"$a"
输出结果为 3，在双引号中 $ 符仍有特殊含义。

2、单引号 ' '
单引号的功能与双引号类似，不过单引号中的所有字符都没有特殊含义：
$a=3
$echo'$a'
输出结果为 $a，可见在单引号中 $ 符是不起作用的。
//2022-04-28:
在单引号中要引用其他变量可以再用单引号来抵消单引号作用
young@LAPTOP-40F97O7C MINGW64 /d/Study/SHELL (master)
$ a=3
young@LAPTOP-40F97O7C MINGW64 /d/Study/SHELL (master)
$ echo '---$a---'
---$a---
young@LAPTOP-40F97O7C MINGW64 /d/Study/SHELL (master)
$ echo '---'$a'---'
---3---

//jdy:可以使用花括号来告诉shell我们要打印的是num变量：
num=2
echo "this is the ${num}nd"
这将打印： this is the 2nd

3、反引号` `
反引号的功能是命令替换，在反引号 ` ` 中的内容通常是命令行，程序会优先执行反引号中的内容，并使用运行结果替换掉反引号处的内容。举个例子：
$ echo `date`
这行命令会先执行反引号中的命令 date，然后用 echo 命令打印出 date 命令的结果（与直接使用 date 命令效果一样）。再举个例子：
#!/bin/bash
a=3
b=5
c=`expr $a* $b`
echo $c
exit 0

4、$ + 小括号 $( )
$(...) 的作用与反引号一样，也是命令替换：
#!/bin/bash
for file in $(ls /)
do
echo $file
done
exit0
这个脚本使用 for 循环打印根目录下所有文件的文件名，使用 $(ls /) 先获得根目录下的所有文件，并将其作为参数列表传给 for 结构。

5、$ + 双小括号 $(( ))
$(( )) 的功能是进行算术运算，括号中的内容为数学表达式，使用 $(( )) 可以求数学表达式的值：
#！/bin/bash
a=3
b=5
c=$(($a * $b))
echo $c
exit 0
上述脚本的输出结果为 15。
使用 $(( )) 进行数学运算时，不需要担心乘号( * )等运算符被 shell 误解为其他含义，因为它们都在括号内。

6、$ + 中括号 $[ ]
$[ ] 的功能与 $(( )) 一样，都是用于算术运算。

7、$ + 大括号 ${ }
${ } 的功能是变量替换，类似于 $ 符，但是 ${ } 比 $ 的替换范围更精准：
#！/bin/bash
a=3
b=5
echo $ab
echo ${a}b
exit0
这段脚本，第一次输出 $ab 的时候，会把 ab 视作一个变量，然后打印 ab 的值，显然为空；第二次使用 ${a}b，则会先输出 a 的值然后再向 STDOUT 打印一个字符 b。

8、小括号 ( )
小括号可以用来定义一个数组变量，如下：
array1=( 12345 )　　　　　　　　　　　　// 在 shell 中定义一个数组变量
array2=( one two three four five )
取数组元素的值也是使用 $ 符号，如下：
$echo $array1
$1
$echo ${array1[2]} #取数组中的一个元素，索引用方括号括起来，和大部分语言一样，数组的索引是从 0 开始的
$3

$echo ${array2[0]}
$one

$echo ${array2[*]}# 输出整个数组
$one two three four five
这里使用了 ${ } 表达式，进行变量替换。

注意：在 shell 中使用数组变量有时会引起一些问题，而且数组变量的可移植性并不好，因此在 shell 编程中，数组变量使用得并不多。

9、双小括号 (( ))
双小括号命令允许在比较过程中使用高级数学表达式：
(( expression ))
其中，expression 可以是任意的数学赋值或表达式。相比 test 命令只能在比较中使用简单的算术操作，双小括号命令提供了更多的数学符号，可以在双小括号中进行各种逻辑运算、数学运算，也支持更多的运算符（如 ++、-- 等）。
常使用的双小括号来在 for 循环中实现 C 语言风格的迭代：
#!/bin/bash
for((i = 0; i < 10; i++))
do
echo-n "$i"
done
echo ""
exit0

10、中括号 [ ]
单个的中括号的功能与 test 命令一样，都是用作条件测试。
#!/bin/bash
read -p "please enter a number: " num
if[ $num -gt 10 ]; then
echo"num > 10"
else
echo"num <= 10"
fi

11、双中括号 [[ ]]
双中括号提供了针对字符串比较的高级特性，使用双中括号 [[ ]] 进行字符串比较时，可以把右边的项看做一个模式，故而可以在 [[ ]] 中使用正则表达式：
#！/bin/bash
if[[ hello == hell* ]]; then
echo "equal"
else
echo "unequal"
fi
exit 0

12、大括号 { }
大括号用于括起一个语句块。如果需要在某些只能使用单个语句的地方（如AND、OR列表中）使用多条语句，则可以用大括号将这多条语句括起来构造一个语句块。

总结：
功能	符号
引用字符串，字符串中部分特殊符号有意义	双引号 " "
引用字符串，字符串中特殊符号全都没有意义	单引号 ' '
命令替换	反引号` `、$()
算术运算	$(( ))、$[ ]、(( ))
变量替换	${}
数组初始化	()
条件测试	[ ]
字符串比较	[[ ]]
括起一个语句块	{ }


