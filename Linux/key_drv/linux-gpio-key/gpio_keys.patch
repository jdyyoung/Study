diff --git a/drivers/input/keyboard/gpio_keys.c b/drivers/input/keyboard/gpio_keys.c
index 9b8079c..31a6483 100644
--- a/drivers/input/keyboard/gpio_keys.c
+++ b/drivers/input/keyboard/gpio_keys.c
@@ -33,6 +33,9 @@
 #include <linux/of_irq.h>
 #include <linux/spinlock.h>
 
+#define LOG_TAG "[gpio-key]: %s() line: %d "
+#define PRINTK_T(fmt, args...)  printk(KERN_INFO LOG_TAG fmt, __FUNCTION__, __LINE__,  ##args)
+
 struct gpio_button_data {
 	const struct gpio_keys_button *button;
 	struct input_dev *input;
@@ -383,6 +386,7 @@ static void gpio_keys_gpio_work_func(struct work_struct *work)
 	struct gpio_button_data *bdata =
 		container_of(work, struct gpio_button_data, work.work);
 
+	PRINTK_T("------ here ------\n");
 	gpio_keys_gpio_report_event(bdata);
 
 	if (bdata->button->wakeup)
@@ -491,8 +495,9 @@ static int gpio_keys_setup_key(struct platform_device *pdev,
 		if (button->active_low)
 			flags |= GPIOF_ACTIVE_LOW;
 
-		error = devm_gpio_request_one(&pdev->dev, button->gpio, flags,
-					      desc);
+		//error = devm_gpio_request_one(&pdev->dev, button->gpio, flags, desc);
+		PRINTK_T("gpio:%d\n",button->gpio);
+		error = devm_gpio_request(&pdev->dev, button->gpio,desc);
 		if (error < 0) {
 			dev_err(dev, "Failed to request GPIO %d, error %d\n",
 				button->gpio, error);
@@ -515,7 +520,9 @@ static int gpio_keys_setup_key(struct platform_device *pdev,
 		if (button->irq) {
 			bdata->irq = button->irq;
 		} else {
+			gpio_direction_input(button->gpio);
 			irq = gpiod_to_irq(bdata->gpiod);
+			PRINTK_T("----jdy---- irq :%d\n",irq);
 			if (irq < 0) {
 				error = irq;
 				dev_err(dev,
@@ -531,7 +538,8 @@ static int gpio_keys_setup_key(struct platform_device *pdev,
 		isr = gpio_keys_gpio_isr;
 		irqflags = IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING;
 
-	} else {
+	} 
+	else {
 		if (!button->irq) {
 			dev_err(dev, "No IRQ specified\n");
 			return -EINVAL;
@@ -572,8 +580,9 @@ static int gpio_keys_setup_key(struct platform_device *pdev,
 	if (!button->can_disable)
 		irqflags |= IRQF_SHARED;
 
-	error = devm_request_any_context_irq(&pdev->dev, bdata->irq,
-					     isr, irqflags, desc, bdata);
+	PRINTK_T("---jdy--- devm_request_threaded_irq()\n");
+    error = devm_request_threaded_irq(&pdev->dev, bdata->irq,NULL,
+                                            isr, irqflags| IRQF_ONESHOT, desc, bdata);
 	if (error < 0) {
 		dev_err(dev, "Unable to claim irq %d; error %d\n",
 			bdata->irq, error);
@@ -718,11 +727,12 @@ static void gpio_keys_close(struct input_dev *input)
 }
 
 static const struct of_device_id gpio_keys_of_match[] = {
-	{ .compatible = "gpio-keys", },
+	{ .compatible = "vatics,gpio-keys", },
 	{ },
 };
 MODULE_DEVICE_TABLE(of, gpio_keys_of_match);
 
+
 #else
 
 static inline struct gpio_keys_platform_data *
@@ -743,6 +753,8 @@ static int gpio_keys_probe(struct platform_device *pdev)
 	int i, error;
 	int wakeup = 0;
 
+	PRINTK_T("------ Strat ------\n");
+
 	if (!pdata) {
 		pdata = gpio_keys_get_devtree_pdata(dev);
 		if (IS_ERR(pdata))
@@ -812,6 +824,8 @@ static int gpio_keys_probe(struct platform_device *pdev)
 	}
 
 	device_init_wakeup(&pdev->dev, wakeup);
+	
+	PRINTK_T("------ End ------\n");
 
 	return 0;
 
